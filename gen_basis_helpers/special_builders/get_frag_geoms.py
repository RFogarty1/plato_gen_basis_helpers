

import copy


def getIsolatedFragGeomsFromFragmentIndices(inpGeom, fragIndices):
	""" Returns iter of geometries created from fragments of inpGeom
	
	Args:
		inpGeom: (plato_pylib UnitCell instance)
		fragIndices: (iter of iter of ints) List of indices to use in each output geometry
			 
	Returns
		outGeoms: (iter of UnitCell instance) All have the same cell, but different contents, as inpGeom. The atoms placed in each are determined by fragIndices
 
	"""

	cartCoords = inpGeom.cartCoords
	
	outGeoms = list()
	
	#get isolated fragments
	for frag in fragIndices:
		currCell = copy.deepcopy(inpGeom)
		currCell.cartCoords = [x for idx,x in enumerate(currCell.cartCoords) if idx in frag]
		outGeoms.append(currCell)
	
	
	return outGeoms
	

def getPairFragNamesFromIndividualFragNames(fragNames, maxSep=None):
	""" Gets a str description of the fragments generated by "getFragPairGeomsFromIndices"
	
	Args:
		fragNames: (iter of str) Names for the individal fragments
		maxSep: (int) Maximum separation for creating pair-geom. For example geoms [A,B,C] with maxSep=1 means AB and BC will be returned, but not AC. The default (None) means return ALL pairs

	Returns
		outNames: (iter of str) For the geom AB with names "a", "b" the output name is "a-b". May add option for a different separator later
 
	"""

	return _getFragPairGeomsOrNamesFromInput(fragNames=fragNames, maxSep=maxSep)

def getFragPairGeomsFromIndices(inpGeom, fragIndices, maxSep=None):
	""" Description of function
	
	Args:
		inpGeom: (plato_pylib UnitCell object)
		fragIndices: (iter of iter of ints) List of indices to use in each output geometry
		maxSep: (int) Maximum separation for creating pair-geom. For example geoms [A,B,C] with maxSep=1 means AB and BC will be returned, but not AC. The default (None) means return ALL pairs

	Returns
		outGeoms: (iter of UnitCell instance) All have the same cell, but different contents, as inpGeom. Order for simple example [A,B,C] is [AB,AC,BC]
 
	"""

	return _getFragPairGeomsOrNamesFromInput(inpGeom=inpGeom, fragIndices=fragIndices, maxSep=maxSep)


def _getFragPairGeomsOrNamesFromInput(inpGeom=None, fragIndices=None, fragNames=None, maxSep=None):

	outGeoms = list()
	outNames = list()

	#Figure out what we loop over
	if (fragIndices is None) and (fragNames is None):
		raise ValueError("")

	elif (fragIndices is not None) and (fragNames is not None):
		assert len(fragIndices)==len(fragNames)
		loopIndices = [idx for idx in range(len(fragIndices))]

	elif fragIndices is not None:
		loopIndices = [idx for idx in range(len(fragIndices))]

	elif fragNames is not None:
		loopIndices = [idx for idx in range(len(fragNames))]

	else:
		raise ValueError("")


	for idxA in loopIndices:
		for idxB in loopIndices[idxA+1:]:
			#Figure out if we want this fragment
			inclThisFrag = True
			if maxSep is not None:
				if (idxB-idxA) > maxSep:
					inclThisFrag = False


			if fragIndices is not None:
				if inclThisFrag:
					combinedIndices = fragIndices[idxA] + fragIndices[idxB]
					currCell = copy.deepcopy(inpGeom)
					currCell.cartCoords = [x for idx,x in enumerate(currCell.cartCoords) if idx in combinedIndices]
					outGeoms.append(currCell)

			if fragNames is not None:
				if inclThisFrag:
					fragA, fragB = fragNames[idxA], fragNames[idxB] 
					currName = "{}-{}".format(fragA,fragB)
					outNames.append(currName)


	#Return one (usual case) or both (much rarer)
	if (fragIndices is not None) and (fragNames is not None):
		return outGeoms, outNames

	elif fragIndices is not None:
		return outGeoms

	elif fragNames is not None:
		return outNames

	else:
		raise ValueError("")



